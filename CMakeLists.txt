cmake_minimum_required(VERSION 3.28)
cmake_policy(SET CMP0048 NEW)
PROJECT(eroc VERSION 0.0.1)

string(REPLACE "." ";" EROC_VERSION_LIST "${CMAKE_PROJECT_VERSION}")
list(GET EROC_VERSION_LIST 0 EROC_VERSION_MAJOR)
list(GET EROC_VERSION_LIST 1 EROC_VERSION_MINOR)
list(GET EROC_VERSION_LIST 2 EROC_VERSION_REL)

#Build config.h
configure_file(config.h.cmake include/eroc/config.h)

#includes
INCLUDE_DIRECTORIES(include)
INCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/include)

SET(COMPILER_CHOOSER ${CMAKE_SOURCE_DIR}/scripts/compiler-chooser.sh)
SET(LINKER_CHOOSER ${CMAKE_SOURCE_DIR}/scripts/linker-chooser.sh)

#dependencies
find_package(PkgConfig REQUIRED)
pkg_check_modules(MINUNIT REQUIRED minunit)

SET(C_OPTIMIZATION_OPTIONS -fPIC -O2)
SET(C_TEST_OPTIONS -g -O0 --coverage)
SET(C_WARNING_OPTIONS
    -Wall -Werror -Wextra -Wpedantic
    -Wno-unused-command-line-argument)
SET(C_RELEASE_BUILD_OPTIONS ${C_OPTIMIZATION_OPTIONS} ${C_WARNING_OPTIONS})
SET(C_TEST_BUILD_OPTIONS ${C_TEST_OPTIONS} ${C_WARNING_OPTIONS})
SET(C_TEST_LINK_OPTIONS -g -O0 --coverage)

#eroc target
AUX_SOURCE_DIRECTORY(src/lib EROC_LIB_SOURCES)
AUX_SOURCE_DIRECTORY(src/eroc EROC_EXEC_SOURCES)
SET(EROC_SOURCES
    ${EROC_LIB_SOURCES}
    ${EROC_EXEC_SOURCES})
ADD_EXECUTABLE(eroc ${EROC_SOURCES})
TARGET_COMPILE_OPTIONS(
    eroc PRIVATE ${C_RELEASE_BUILD_OPTIONS})

#eroc test target
AUX_SOURCE_DIRECTORY(test/lib TEST_EROC_LIB_SOURCES)
SET(TEST_EROC_SOURCES
    ${TEST_EROC_LIB_SOURCES})
ADD_EXECUTABLE(testeroc
    ${EROC_LIB_SOURCES} ${TEST_EROC_LIB_SOURCES})
TARGET_COMPILE_OPTIONS(
    testeroc PRIVATE ${C_TEST_BUILD_OPTIONS} ${MINUNIT_CFLAGS})
TARGET_LINK_LIBRARIES(
    testeroc PRIVATE ${C_TEST_LINK_OPTIONS} ${MINUNIT_LDFLAGS})
SET_SOURCE_FILES_PROPERTIES(
    ${TEST_EROC_LIB_SOURCES} PROPERTIES COMPILE_FLAGS --std=c++20)

#run the unit test command automatically when the eroc lib test is built
ADD_CUSTOM_COMMAND(
    TARGET testeroc
    POST_BUILD
    COMMAND testeroc
    USES_TERMINAL)
